<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:黑体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:等线;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:楷体_GB2312;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:̥_GB2312;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:DFKai-SB;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:华文新魏;
	panose-1:2 1 8 0 4 1 1 1 1 1;}
@font-face
	{font-family:方正姚体;
	panose-1:2 1 6 1 3 1 1 1 1 1;}
@font-face
	{font-family:幼圆;
	panose-1:2 1 5 9 6 1 1 1 1 1;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:微软雅黑;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:ˎ̥;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Courier New 宋体";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;}
@font-face
	{font-family:"Segoe UI regular";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Seoge ui";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Myriad Pro";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Courier New ����";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:be;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:zm;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@黑体";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@等线";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@微软雅黑";
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"\@楷体_GB2312";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Courier New 宋体";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"\@幼圆";
	panose-1:2 1 5 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@方正姚体";
	panose-1:2 1 6 1 3 1 1 1 1 1;}
@font-face
	{font-family:"\@华文新魏";
	panose-1:2 1 8 0 4 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Times New Roman",serif;
	color:windowtext;}
h2
	{mso-style-name:"标题 2\,Heading 2 Hidden\,Heading 2 CCBS\,Titre3\,HD2\,H2\,h2\,Level 2 Topic Heading\,Heading 2 Hidden1\,Heading 2 CCBS1\,Titre31\,HD21\,H21\,h21\,Level 2 Topic Heading1\,节题";
	mso-style-link:"标题 2 字符1\,Heading 2 Hidden 字符1\,Heading 2 CCBS 字符1\,Titre3 字符1\,HD2 字符1\,H2 字符1\,h2 字符1\,Level 2 Topic Heading 字符1\,Heading 2 Hidden1 字符1\,Heading 2 CCBS1 字符1\,Titre31 字符1\,HD21 字符1\,H21 字符1\,h21 字符1\,Level 2 Topic Heading1 字符1\,节题 字符1";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:1.0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-1.0cm;
	line-height:150%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial",sans-serif;
	color:windowtext;
	font-weight:bold;}
h3
	{mso-style-name:"标题 3\,Heading 3 - old\,sect1\.2\.3\,h3\,Level 3 Topic Heading\,Heading 3 - old1\,sect1\.2\.31\,h31\,Level 3 Topic Heading1\,\(分步\)\,\(小节\)";
	mso-style-link:"标题 3 字符2\,Heading 3 - old 字符2\,sect1\.2\.3 字符2\,h3 字符2\,Level 3 Topic Heading 字符2\,Heading 3 - old1 字符2\,sect1\.2\.31 字符2\,h31 字符2\,Level 3 Topic Heading1 字符2\,\(分步\) 字符2\,\(小节\) 字符2";
	margin-top:13.5pt;
	margin-right:0cm;
	margin-bottom:13.5pt;
	margin-left:78.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-35.45pt;
	line-height:172%;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:"Times New Roman",serif;
	color:windowtext;
	font-weight:bold;}
span.MsoEndnoteReference
	{vertical-align:super;}
p.MsoEndnoteText, li.MsoEndnoteText, div.MsoEndnoteText
	{mso-style-link:"尾注文本 字符2";
	margin:0cm;
	text-indent:21.0pt;
	layout-grid-mode:char;
	font-size:10.5pt;
	font-family:"Times New Roman",serif;
	color:windowtext;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	font-size:12.0pt;
	font-family:宋体;
	color:windowtext;}
span.2
	{mso-style-name:"尾注文本 字符2";
	mso-style-link:尾注文本;
	font-family:"Times New Roman",serif;}
span.32
	{mso-style-name:"标题 3 字符2\,Heading 3 - old 字符2\,sect1\.2\.3 字符2\,h3 字符2\,Level 3 Topic Heading 字符2\,Heading 3 - old1 字符2\,sect1\.2\.31 字符2\,h31 字符2\,Level 3 Topic Heading1 字符2\,\(分步\) 字符2\,\(小节\) 字符2";
	mso-style-link:"标题 3\,Heading 3 - old\,sect1\.2\.3\,h3\,Level 3 Topic Heading\,Heading 3 - old1\,sect1\.2\.31\,h31\,Level 3 Topic Heading1\,\(分步\)\,\(小节\)";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.keyword
	{mso-style-name:keyword;}
p.4142515, li.4142515, div.4142515
	{mso-style-name:"样式 标题 4 + 段前\: 14\.25 磅 段后\: 15 磅";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.55pt;
	text-indent:-42.55pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial",sans-serif;
	color:windowtext;
	font-weight:bold;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
 /* Page Definitions */
 @page WordSection1
	{size:21.0cm 808.0pt;
	margin:78.0pt 2.0cm 78.0pt 2.0cm;
	layout-grid:14.45pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink=purple style='word-wrap:break-word;text-justify-trim:
punctuation'>

<div class=WordSection1 style='layout-grid:14.45pt'>

<h3 align=left style='margin-top:6.0pt;margin-right:0cm;margin-bottom:6.0pt;
margin-left:35.45pt;text-align:left;line-height:normal;layout-grid-mode:char;
word-break:break-all'><a name="_Ref146631552"></a><a name="_Toc183688506"><span
lang=EN-US style='font-size:14.0pt;font-family:黑体'>6.2.1</span><span
style='font-size:14.0pt;font-family:宋体'>一切对象类型的继承拓展的树根：最少属性方法的对象类型</span></a><span
lang=EN-US style='font-size:14.0pt;font-family:黑体'>System.Object</span></h3>

<p class=MsoListParagraph style='margin-top:6.0pt;margin-right:0cm;margin-bottom:
6.0pt;margin-left:0cm;text-indent:21.3pt;layout-grid-mode:char'><a
name="_Toc133146156"></a><a name="_Ref141551854"></a><a name="_Ref141909868"></a><a
name="_Ref142488309"></a><a name="_Ref143003847"></a><a name="_Ref143020391"><span
style='font-size:10.0pt'>基于</span></a><span
style='font-size:11.0pt'>表 <span lang=EN-US>3‑9</span></span><span lang=EN-US
style='font-size:11.0pt'>/</span><span
style='font-size:10.0pt;font-family:黑体'>案例<span lang=EN-US>6‑1</span></span><span
lang=EN-US style='font-size:10.0pt'>/</span><span
style='font-size:10.0pt'>表 <span lang=EN-US>6‑1</span></span><span lang=EN-US
style='font-size:10.0pt'>/</span><span
style='font-size:10.0pt'>表 <span lang=EN-US>6‑2</span></span><span
style='font-size:10.0pt'>，</span><span lang=EN-US style='font-size:10.0pt'>“.Net</span><span
style='font-size:10.0pt'>平台<span lang=EN-US>C#</span>语言<span lang=EN-US>”</span>中，对象类型的名称是对象类型的最微观本质分类，并且可以进一步抽象众多分类视角。本节探究树根对象类型，</span><span style='font-size:10.0pt;font-family:黑体'>表 <span lang=EN-US>6‑3</span></span><span
style='font-size:10.0pt'>所示。</span></p>

<p class=MsoNormal align=center style='margin-top:6.0pt;text-align:center;
text-indent:0cm;layout-grid-mode:char'><a name="_Toc180710582"></a><a
name="_Toc180710722"></a><a name="_Toc183688548"></a><a name="_Ref153014258"><span
style='font-size:10.0pt;font-family:黑体'>表 </span></a><span
lang=EN-US style='font-size:10.0pt;font-family:黑体'>6</span><span lang=EN-US
style='font-size:10.0pt;font-family:黑体'>‑</span><span
lang=EN-US style='font-size:10.0pt;font-family:黑体'>3</span><span lang=EN-US
style='font-size:10.0pt;font-family:黑体'> </span><span style='font-size:10.0pt;font-family:黑体'>一切对象类型的继承拓展的树根：最少属性方法的对象类型<span lang=EN-US>System.Object</span></span></p>

<div align=center>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=170 valign=top style='width:127.35pt;border:dashed windowtext 1.0pt;
  background:#E7E6E6;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;text-indent:0cm;layout-grid-mode:
  char;word-break:break-all'><span
  lang=EN-US style='font-size:10.0pt;font-family:黑体;color:black'>ASP.Net MVC</span><span
  style='font-size:10.0pt;font-family:黑体;color:black'>架构的视图<span lang=EN-US>V</span>的创新研发：</span><span
  lang=EN-US style='font-size:10.0pt;color:black'>“</span><span
  style='font-size:10.0pt;font-family:黑体;color:black'>客户端的<span lang=EN-US>Edge</span>浏览器宿主的视图<span
  lang=EN-US>V</span>宿客”的<span lang=EN-US>C#</span>语言思维</span></p>
  </td>
  <td width=246 valign=top style='width:184.25pt;border:dashed windowtext 1.0pt;
  border-left:none;background:#E7E6E6;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='margin-top:6.0pt;text-align:center;
  text-indent:0cm;layout-grid-mode:char;word-break:break-all'><span
  lang=EN-US style='font-size:10.0pt;font-family:黑体;color:black'>ASP.Net MVC</span><span
  style='font-size:10.0pt;font-family:黑体;color:black'>架构的控制<span lang=EN-US>C</span>的创新研发：</span><span
  lang=EN-US style='font-size:10.0pt;color:black'>“</span><span
  style='font-size:10.0pt;font-family:黑体;color:black'>互动的<span lang=EN-US>Kestrel/</span></span><span
  lang=EN-US style='font-size:11.0pt;font-family:黑体;color:black'>IIS</span><span
  style='font-size:11.0pt;font-family:黑体;color:black'>宿主的控制<span lang=EN-US>C</span>宿客”的<span
  lang=EN-US>C#</span>语言思维</span></p>
  <p class=MsoNormal align=center style='margin-top:6.0pt;text-align:center;
  text-indent:0cm;layout-grid-mode:char;word-break:break-all'><span lang=EN-US
  style='font-size:10.0pt'>&nbsp;</span></p>
  </td>
  <td width=189 valign=top style='width:5.0cm;border:dashed windowtext 1.0pt;
  border-left:none;background:#E7E6E6;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;text-indent:0cm;layout-grid-mode:
  char;word-break:break-all'><span
  lang=EN-US style='font-size:11.0pt;font-family:黑体;color:black'>ASP.Net MVC</span><span
  style='font-size:11.0pt;font-family:黑体;color:black'>架构的模型<span lang=EN-US>M</span>的创新研发：<span
  lang=EN-US>“</span>服务端的<span lang=EN-US>SS/ChatGPT/Qwen</span>宿主的模型<span
  lang=EN-US>M</span>宿客”的<span lang=EN-US>C#</span>语言思维</span></p>
  </td>
 </tr>
 <tr>
  <td width=604 colspan=3 valign=top style='width:453.35pt;border:dashed windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoListParagraph style='margin-top:6.0pt;margin-right:0cm;
  margin-bottom:6.0pt;margin-left:0cm;text-indent:22.7pt;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US style='font-size:10.0pt'>VS</span><span
  style='font-size:10.0pt'>对象浏览器中可查看到<span lang=EN-US>System.Object</span>内置如下方法（没有内置属性）</span><sup><span
  lang=EN-US>[</span><a href="#_edn1" name="_ednref1" title=""><span
  class=MsoEndnoteReference><span lang=EN-US><span class=MsoEndnoteReference><span
  lang=EN-US style='font-size:12.0pt;font-family:宋体'>[1]</span></span></span></span></a></sup><sup><span
  lang=EN-US>]</span></sup><span style='font-size:10.0pt'>。复合数据读写的对象类型的<span
  lang=EN-US>System.Object</span>，是简单数据读写的对象类型封装而成，所以，属性<span lang=EN-US>/</span>方法支持各种计算，即，</span><span lang=EN-US style='font-size:10.0pt'>6.2.3</span><span style='font-size:10.0pt'>节所述的定性计算、</span><span lang=EN-US style='font-size:10.0pt'>6.2.3</span><span style='font-size:10.0pt'>节所述的布尔计算、</span><span lang=EN-US style='font-size:10.0pt'>6.2.5</span><span style='font-size:10.0pt'>节所述的定量计算。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public Object()</span><span style='font-size:10.0pt;
  font-family:宋体'>：</span><span lang=EN-US style='font-size:10.0pt'>System.Object</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例诞生时将调用的构造方法。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>~Object()</span><span style='font-size:10.0pt;
  font-family:宋体'>：</span><span lang=EN-US style='font-size:10.0pt;font-family:
  宋体;color:black'>System</span><span lang=EN-US style='font-size:10.0pt'>.Object</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例离世时将调用的析构方法。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public static System.Boolean Equals(</span><span
  lang=EN-US style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object objA, </span><span lang=EN-US
  style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object objB)</span><span
  style='font-size:10.0pt;font-family:宋体'>：比较作为两个参数输入的</span><span lang=EN-US
  style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object </span><span style='font-size:
  10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US style='font-size:
  10.0pt'>objA</span><span style='font-size:10.0pt;font-family:宋体'>、</span><span
  lang=EN-US style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object </span><span style='font-size:
  10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US style='font-size:
  10.0pt'>objB</span><span style='font-size:10.0pt;font-family:宋体'>是否拷贝相等（如果拷贝相等，则返回简单数据读写的</span><span
  lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>true</span><span style='font-size:10.0pt;font-family:
  宋体'>；否则返回简单数据读写的</span><span lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>false</span><span style='font-size:10.0pt;
  font-family:宋体'>。此方法等同</span><span lang=EN-US style='font-size:10.0pt'>objA</span><span
  class=keyword><span lang=EN-US style='font-size:10.0pt'>==</span></span><span
  lang=EN-US style='font-size:10.0pt'>objB</span><span style='font-size:10.0pt;
  font-family:宋体'>表达式）。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public virtual System.Boolean Equals(</span><span
  lang=EN-US style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object obj)</span><span
  style='font-size:10.0pt;font-family:宋体'>：比较当前的对象实例，是否等于作为参数输入的</span><span
  lang=EN-US style='font-size:10.0pt'>System.Object</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>obj</span><span style='font-size:10.0pt;font-family:
  宋体'>（如果相等，则返回简单数据读写的</span><span lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>true</span><span style='font-size:10.0pt;font-family:
  宋体'>；否则返回简单数据读写的</span><span lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>false</span><span style='font-size:10.0pt;
  font-family:宋体'>）。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public static System.Boolean ReferenceEquals(</span><span
  lang=EN-US style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object objA, </span><span lang=EN-US
  style='font-size:10.0pt;font-family:宋体;color:black'>System</span><span
  lang=EN-US style='font-size:10.0pt'>.Object objB)</span><span
  style='font-size:10.0pt;font-family:宋体'>：比较作为两个参数输入的</span><span lang=EN-US
  style='font-size:10.0pt'>System.Object</span><span style='font-size:10.0pt;
  font-family:宋体'>对象类型的对象实例</span><span lang=EN-US style='font-size:10.0pt'>objA</span><span
  style='font-size:10.0pt;font-family:宋体'>、</span><span lang=EN-US
  style='font-size:10.0pt'>System.Object</span><span style='font-size:10.0pt;
  font-family:宋体'>对象类型的对象实例</span><span lang=EN-US style='font-size:10.0pt'>objB</span><span
  style='font-size:10.0pt;font-family:宋体'>是否引用相等（如果引用相等，则返回简单数据读写的</span><span
  lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>true</span><span style='font-size:10.0pt;font-family:
  宋体'>；否则返回简单数据读写的</span><span lang=EN-US style='font-size:10.0pt'>System.Boolean</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例</span><span lang=EN-US
  style='font-size:10.0pt'>false</span><span style='font-size:10.0pt;
  font-family:宋体'>。此方法等同</span><span lang=EN-US style='font-size:10.0pt'>objA</span><span
  class=keyword><span lang=EN-US style='font-size:10.0pt'>==</span></span><span
  lang=EN-US style='font-size:10.0pt'>objB</span><span style='font-size:10.0pt;
  font-family:宋体'>表达式）。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public virtual System.Int32 GetHashCode()</span><span
  style='font-size:10.0pt;font-family:宋体'>：返回当前的对象实例的哈希代码（哈希代码属于简单数据读写的对象类型</span><span
  lang=EN-US style='font-size:10.0pt'>System.Int32</span><span
  style='font-size:10.0pt;font-family:宋体'>的对象实例）。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public System.Type  GetType()</span><span
  style='font-size:10.0pt;font-family:宋体'>：返回当前的对象实例的（属于复合数据读写的</span><span
  lang=EN-US style='font-size:10.0pt'>System.Type</span><span style='font-size:
  10.0pt;font-family:宋体'>对象类型的对象实例的）对象类型。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>protected System.Object MemberwiseClone()</span><span
  style='font-size:10.0pt;font-family:宋体'>：返回当前对象实例的（属于</span><span lang=EN-US
  style='font-size:10.0pt'>System.Object</span><span style='font-size:10.0pt;
  font-family:宋体'>对象类型的对象实例的）浅拷贝结果</span><sup><span lang=EN-US
  style='font-size:10.0pt'>[</span></sup><a href="#_edn2" name="_ednref2"
  title=""><span class=MsoEndnoteReference><span lang=EN-US style='font-size:
  10.0pt'><span class=MsoEndnoteReference><span lang=EN-US style='font-size:
  10.0pt;font-family:"Times New Roman",serif'>[2]</span></span></span></span></a><sup><span
  lang=EN-US style='font-size:10.0pt'>]</span></sup><span style='font-size:
  10.0pt;font-family:宋体'>。</span></p>
  <p class=MsoNormal style='margin-top:7.2pt;margin-right:0cm;margin-bottom:
  0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:21.3pt'><span
  lang=EN-US style='font-size:10.0pt;font-family:Wingdings'>l<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span lang=EN-US
  style='font-size:10.0pt'>public virtual System.String ToString()</span><span
  style='font-size:10.0pt;font-family:宋体'>：返回当前对象实例的（属于简单数据读写的</span><span
  lang=EN-US style='font-size:10.0pt'>System.String</span><span
  style='font-size:10.0pt;font-family:宋体'>对象类型的对象实例的）字符串。</span></p>
  <p class=MsoNormal style='text-indent:0cm;layout-grid-mode:char;word-break:
  break-all'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:6.0pt;layout-grid-mode:char;word-break:
break-all'><span lang=EN-US style='font-size:10.0pt;font-family:黑体'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<div><br clear=all>

<hr align=left size=1 width="33%">

<div id=edn1>

<p class=MsoNormal align=left style='margin-left:18.0pt;text-align:left;
text-indent:-18.0pt;word-break:break-all'><a href="#_ednref1" name="_edn1"
title=""></a><span lang=EN-US style='font-size:9.0pt'>[<span lang=EN-US
style='font-size:9.0pt;font-family:"Times New Roman",serif'>[1]</span>] </span><span
lang=EN-US><a
href="https://learn.microsoft.com/en-us/dotnet/api/system.object?view=net-7.0"><span
style='font-size:9.0pt'>https://learn.microsoft.com/en-us/dotnet/api/system.object?view=net-7.0</span></a></span><span
style='font-size:9.0pt;font-family:宋体'>。</span></p>

</div>

<div id=edn2>

<p class=MsoEndnoteText style='margin-left:12.15pt;text-indent:-12.15pt;
word-break:break-all'><a href="#_ednref2" name="_edn2" title=""></a><span
lang=EN-US style='font-size:9.0pt'>[<span lang=EN-US style='font-size:9.0pt;
font-family:"Times New Roman",serif'>[2]</span>] </span><span style='font-size:
9.0pt;font-family:宋体'>对象的复制，分为浅度复制</span><span lang=EN-US style='font-size:
9.0pt'>/</span><span style='font-size:9.0pt;font-family:宋体'>深度复制。一个对象的成员有可能是拷贝对象类型，有可能是引用对象类型。对象浅度复制的时候，对于拷贝对象类型成员，会复制其本身</span><span
lang=EN-US style='font-size:9.0pt'>(</span><span style='font-size:9.0pt;
font-family:宋体'>拷贝对象类型变量本身包含了所有数据，复制时进行按位拷贝</span><span lang=EN-US
style='font-size:9.0pt'>)</span><span style='font-size:9.0pt;font-family:宋体'>；对于引用对象类型成员</span><span
lang=EN-US style='font-size:9.0pt'>(</span><span style='font-size:9.0pt;
font-family:宋体'>注意它会引用另一个对象</span><span lang=EN-US style='font-size:9.0pt'>)</span><span
style='font-size:9.0pt;font-family:宋体'>，仅仅复制引用，而不创建其引用的对象。结果就是：新对象的引用成员和复制对象的引用成员指向了同一个对象。深度复制就是将引用成员指向的对象也进行复制。实际的过程是创建新的引用成员指向的对象，然后复制对象包含的数据。深度复制可能会变得非常复杂，因为引用成员指向的对象可能包含另一个引用对象类型成员，等等。浅度复制调用类型内置的</span><span
lang=EN-US style='font-size:9.0pt'>MemberwiseClone()</span><span
style='font-size:9.0pt;font-family:宋体'>就可以实现。深度复制需要自创方编写代码实现，可有多种途径，建议使用序列化方法最为简易。序列化是指任何类型的对象状态，都可序列化为二进制或</span><span
lang=EN-US style='font-size:9.0pt'>XML</span><span style='font-size:9.0pt;
font-family:宋体'>格式文件存储起来（以便在需要时反序列化而还原对象状态，实现还原使用），或，序列化为二进制或</span><span
lang=EN-US style='font-size:9.0pt'>XML</span><span style='font-size:9.0pt;
font-family:宋体'>格式的数据流而传输给其他应用程序（以便其他应用程序反序列化而还原对象状态，实现数据交换）。例如，通过将对象序列化为文件，可在不同的应用程序打开。又如，通过将对象序列化到剪贴板，可在不同的应用程序之间共享对象，等等。</span><span
lang=EN-US style='font-size:9.0pt'>.Net</span><span style='font-size:9.0pt;
font-family:宋体'>的</span><span lang=EN-US style='font-size:9.0pt'>System.Runtime.Serialization</span><span
style='font-size:9.0pt;font-family:宋体'>名称空间包含可用于序列化和反序列化的对象类型，</span><span
lang=EN-US style='font-size:9.0pt'>System.Xml.Serialization</span><span
style='font-size:9.0pt;font-family:宋体'>名称空间包含可用于将对象序列化为</span><span lang=EN-US
style='font-size:9.0pt'>XML</span><span style='font-size:9.0pt;font-family:
宋体'>格式的文件或流的对象类型；</span><span lang=EN-US style='font-size:9.0pt'>System.IO</span><span
style='font-size:9.0pt;font-family:宋体'>名称空间包含读写文件和数据流的对象类型，以及操作目录</span><span
lang=EN-US style='font-size:9.0pt'>/</span><span style='font-size:9.0pt;
font-family:宋体'>文件的对象类型，以便调用。</span></p>

</div>

</div>

<!--右键菜单开始 --><div id='popupDiv' onclick='fnPopupClosePopup();' oncontextmenu='fnPopupContextMenu();' style='position:fixed;z-Index:1000;margin: 2px; border: 1px;   overflow:visible;  font-size: 11px; cursor: default;display:none;'><div style='position: relative;' onmouseover='fnPopupMouseOver();' onmouseout='fnPopupMouseOut();'><div title='刷新标题面' onclick='location.reload();'>刷新</div><div title='单击将在是否可以在线编辑课文的之间切换!' onclick='if(document.body.contentEditable==true) { document.body.contentEditable = false; } else { document.body.contentEditable = true;}'>课文编辑切换</div><div title='编辑后可保存编辑结果' onclick='fnSave();'>保存</div><div title='打开帮助文档' onclick='fnHelp();'>帮助</div></div></div><!--右键菜单结束--><script id=sIdScriptAutoAddedForDynFunction1 src='../../../../common/script/content.js'></script><script id=sIdScriptAutoAddedForDynFunction2 src='../../../../common/script/Popup.js'></script><script id=sIdScriptAutoAddedForDynFunction3>document.body.onload=fnOnLoad;</script></body>

</html>
