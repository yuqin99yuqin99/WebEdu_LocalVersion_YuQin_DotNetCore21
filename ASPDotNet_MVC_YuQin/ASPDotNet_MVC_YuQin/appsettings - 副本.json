//本机版需要移动使用，而且其中的一些资源需要发布到服务版中，绝对路径、相对路径变化莫测，编译生成的调试与发布部署时也不一样，所以，非.cs文件尽量集中（尽量放置在wwwroot下？）；本文件中的配置尽量简单。web.config等部署配置文件则通过自编写功能，本软件启动后配置，配置后可能需要重启本软件。
{
  /**
ASP.NET Core默认会从appSetting.json中的Logging属性读取日志的配置(当然你也可以从其他文件中读取配置)，这里设置了不同的日志提供器产生的最低的日志级别，配置样例如下。

{
"Logging": {
"Debug": {
"LogLevel": {
"Default": "Information"
}
},
"Console": {
"LogLevel": {
"Microsoft.AspNetCore.Mvc.Razor.Internal": "Warning",
"Microsoft.AspNetCore.Mvc.Razor.Razor": "Debug",
"Microsoft.AspNetCore.Mvc.Razor": "Error",
"Default": "Trace"
}
},
"LogLevel": {
"Default": "Debug"
}
}
}
以上代码中的Debug表示Debug日志提供器, Console表示Console日志提供器, 最后一个LogLevel表示其他日志提供器通用。
Debug中的Default设置为Information, 即Debug中产生的日志最低级别是Information, 低于Information级别的日志不会输出。Console中的配置同理。
            //ASP.NET Core中内置了一个通用日志接口ILogger，并实现了多种内置的日志提供器，例如Console、Debug、EventSource、EventLog、TraceSource、Azure App Service。
          /**ASP.NET Core中提供了6种日志级别，分别是Trace, Debug, Information, Warning, Error, Critical。以下是他们的具体使用场景
Trace 记录一些对程序员调试问题有帮助的信息,其中可能包含一些敏感信息, 所以应该避免在生产环境中启用Trace日志
Debug   记录一些在开发和调试阶段有用的短时变量(Short - term usefulness), 所以除非为了临时排除生产环境的  故障，开发人员应该尽量避免在生产环境中启用Debug日志
Information 记录应用程序的一些流程, 例如，记录当前api请求的url
Warning 记录应用程序中发生的不正常或者未预期的事件信息。这些信息中可能包含错误消息或者错误产生的条件, 例如, 文件未找到
Error   记录应用程序中某个操作产生的错误和异常信息。
Critical 记录一些需要立刻修复的问题。例如数据丢失，磁盘空间不足。**;
* **/
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "Kestrel": { //C#代码中指定的配置，一般覆盖在此的配置。Kestrel反向代理以及其他配置，参见https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2
    "EndpointDefaults": {
      //"以下配置为特定URL指定连接协议（HTTP/1.1 和 HTTP/2）。如果省略URL，则为 URL指定。
      "Url": "https://localhost:5001",
      "Protocols": "Http1AndHttp2"
    }
  },
  "AllowedHosts": "*", //默认情况下，主机筛选中间件处于禁用状态。 要启用该中间件，请在 appsettings.json/appsettings.<EnvironmentName>.json 中定义一个 AllowedHosts 键。 此值是以分号分隔的不带端口号的主机名列表。
  //"PartPathOfLocalDatabase": "\\Database\\WebEdu_LocalVersion_YuQin.sqlite", //根路径信息硬编码在startup.cs中随运行位置而动态获取。部分路径信息在此软编码配置
  //"PartPathOfLocalDatabaseOfAdmin": "\\Database\\Admin.sqlite", //根路径信息硬编码在startup.cs中随运行位置而动态获取。部分路径信息在此软编码配置
  "ConnectionStrings": {
    "PartPathOfLocalDatabaseDefault": "\\Database\\WebEdu_LocalVersion_YuQin.sqlite", //根路径信息硬编码在startup.cs中随运行位置而动态获取。部分路径信息在此软编码配置。
    "PartPathOfLocalDatabaseOfAdmin": "\\Database\\Admin.sqlite", //根路径信息硬编码在startup.cs中随运行位置而动态获取。部分路径信息在此软编码配置。
    "MovieDbContext": "Server=(localdb)\\mssqllocaldb;Database=Movies;Trusted_Connection=True;MultipleActiveResultSets=true" //用于SQL Server Express
    // "Default": "NormalDatabase"
    // "RazorPagesMovieContext": "Filename=F:\\MY.DB"//SQLite的连接字符串，只需要写  "Filename=[绝对路径]"
    // "MovieDbContext": "data source=D:\\YuQinWebEdu\\WebEdu_LocalVersion_YuQin\\src\\WebEdu_LocalVersion_YuQin_DotNetCore2.1\\App_Data\\WebEdu_LocalVersion_YuQin.db",
    // "MovieDbContext": "Filename=D:\\WebEdu_LocalVersion_YuQin.db"//本机版中本机数据库SQLite需要移动使用，路径硬编码配置到startup.cs中，文件名本文件中软编码配置更合适？服务版中服务邢数据库如SQL Server是固定使用，所以本文件中软配置更合适？
    //"MovieDbContext": "Server=(localdb)\\mssqllocaldb;Database=RazorPagesMovieContext-21;Trusted_Connection=True;MultipleActiveResultSets=true" //连接SQL Server Express。
    /**
        <!-- <add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=(local); Initial Catalog=MusicStore;Integrated Security=true;"/>-->
    <!--<add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=(local)\MSSQLSERVER2017; Initial Catalog=MusicStore;Integrated Security=true;"/>-->
    <!--如果使用本机SQL Server数据库（本机安装了多个SS实例（实例名称通过VS的“服务器资源管理器”或“SQL Server对象资源管理器”可以查看到），Windows验证用户权限，请使用上述数据库连接-->
    <!-- <add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=(local); Initial Catalog=MusicStore;Integrated Security=true;"/>-->
    <!--如果使用本机SQL Server数据库，Windows验证用户权限，请使用上述数据库连接-->
    <!--<add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=(local); Initial Catalog=MusicStore;Integrated Security=false;User ID=sa;Password=123456"/>-->
    <!--如果使用本机SQL Server数据库，SQL Server验证用户权限，请使用上述数据库连接-->
    <!-- <add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=bds256641234.my3w.com; Initial Catalog=MusicStore;Integrated Security=false;User ID=bds256641234;Password=0123456789hxl"/>-->
    <!--如果使用远程SQL Server数据库，请使用类似上述的数据库连接-->
    <!--<add name="MusicStoreDbContext" providerName="System.Data.SqlClient" connectionString="Data Source=bds256641234.my3w.com; Initial Catalog=bds256641234_db;Integrated Security=false;User ID=bds256641234;Password=0123456789hxl"/>-->
    <!--如果使用远程SQL Server数据库，请使用类似上述的数据库连接-->
    <!--<add name="MusicStoreDbContext" providerName="Microsoft.Jet.OLEDB.4.0" connectionString="Data Source=|DataDirectory|MusicStore.mdb"/>-->
    <!--如果软件编译为x86的32位程序，并使用本机32位Access数据库，OLEDB方式请使用上述数据库连接-->
    <!--<add name="MusicStoreDbContext" providerName="Microsoft.ACE.OLEDB.12.0" connectionString="Data Source=|DataDirectory|MusicStore.accdb" />-->
    <!--如果软件编译为x64的64位程序，并使用本机64位Access数据库，下载安装64位的驱动http://www.microsoft.com/downloads/zh-cn/details.aspx?familyid=c06b8369-60dd-4b64-a44b-84b371ede16d，将所有Microsoft.Jet.OLEDB.4.0 改成Microsoft.ACE.OLEDB.12.0-->
    <add name="MusicStoreDbContext" providerName="System.Data.SqlServerCe.4.0" connectionString="Data Source=|DataDirectory|MusicStore.sdf"/>
    <!--如果使用本机SQL Server Compact Edition数据库，请使用上述数据库连接（|DataDirectory|映射App_Data文件夹）-->
    <add name="DefaultConnection"  providerName="System.Data.SqlClient" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=aspnet-MusicStore_VS2013-20140806222641;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnet-MusicStore_VS2013-20140806222641.mdf"/>
    <!--如果使用本机LocalDB数据库，请使用上述数据库连接.随着SQL Server 2012的发布， LocalDB 可以看做是SQL Server Express的轻量级版本。-->
  **/
  }
} 

